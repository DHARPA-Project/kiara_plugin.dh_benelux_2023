{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kiara plugin: dh_benelux_2023","text":"<p>This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara.</p>"},{"location":"#description","title":"Description","text":"<p>dh_benelux_2023</p>"},{"location":"#package-content","title":"Package content","text":""},{"location":"#module_types","title":"module_types","text":"<ul> <li> <p><code>dh_benelux_2023.example</code>: A very simple example module; concatenate two strings.</p> </li> <li> <p><code>get_lccn_metadata</code>: This module will get metadata from strings that comply with LCCN pattern: '/sn86069873/1900-01-05/' to get the publication references and the dates and add those informations as two new columns.</p> </li> <li> <p><code>get_text_stats</code>: This module will add columns with words and characters count to a table containing text content.</p> </li> <li> <p><code>viz_data_query</code>: This module processes a dataset to display a visualization of the corpus aggregated by a period of time.</p> </li> </ul>"},{"location":"#operations","title":"operations","text":"<ul> <li> <p><code>dh_benelux_2023.example</code>: A very simple example module; concatenate two strings.</p> </li> <li> <p><code>get_lccn_metadata</code>: This module will get metadata from strings that comply with LCCN pattern: '/sn86069873/1900-01-05/' to get the publication references and the dates and add those informations as two new columns.</p> </li> <li> <p><code>get_text_stats</code>: This module will add columns with words and characters count to a table containing text content.</p> </li> <li> <p><code>viz_data_query</code>: This module processes a dataset to display a visualization of the corpus aggregated by a period of time.</p> </li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>Documentation: https://DHARPA-Project.github.io/kiara_plugin.dh_benelux_2023</li> <li>Code: https://github.com/DHARPA-Project/kiara_plugin.dh_benelux_2023</li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Package contents</li> <li>Usage</li> <li>Development</li> <li>API reference</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#prepare-development-environment","title":"Prepare development environment","text":""},{"location":"development/#using-conda-recommended","title":"Using conda (recommended)","text":"<pre><code>conda create -n dh_benelux_2023 python=3.9\nconda activate dh_benelux_2023\nconda install -c conda-forge mamba   # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below\nmamba install -c conda-forge -c dharpa kiara\nmamba install -c conda-forge -c dharpa kiara_plugin.core_types kiara_plugin.tabular   # optional, adjust which plugin packages you depend on, those two are quite common\n</code></pre>"},{"location":"development/#using-python-venv","title":"Using Python venv","text":"<p>Later, alligator.</p>"},{"location":"development/#check-out-the-source-code","title":"Check out the source code","text":"<p>First, fork the kiara_plugin.dh_benelux_2023 repository into your personal Github account.</p> <p>Then, use the resulting url (in my case: https://github.com/makkus/kiara_modules.dh_benelux_2023.git) to clone the repository locally:</p> <pre><code>https://github.com/&lt;YOUR_FORKED_GITHUB_ID&gt;/kiara_plugin.dh_benelux_2023\n</code></pre>"},{"location":"development/#install-the-kiara-plugin-package-into-it","title":"Install the kiara plugin package into it","text":"<pre><code>cd kiara_plugin.dh_benelux_2023\npip install -e '.[all_dev]'\n</code></pre> <p>Here we use the <code>-e</code> option for the <code>pip install</code> command. This installs the local folder as a package in development mode into the current environment. Development mode makes it so that if you change any of the files in this folder, the Python environment will pick it up automatically, and whenever you run anything in this environment the latest version of your code/files are used.</p> <p>We also install a few additional requirements  (the <code>[all_dev]</code> part in the command above) that are not strictly necessary for <code>kiara</code> itself, or this package, but help with various development-related tasks.</p>"},{"location":"development/#install-some-pre-commit-check-tooling-optional","title":"Install some pre-commit check tooling (optional)","text":"<p>This step is optional, but helps with keeping the code clean and CI from failing. By installing pre-commit hooks like here, whenever you do a <code>git commit</code> in this repo, a series of checks and cleanup tasks are run, until everything is in a state that will hopefully make Github Actions not complain when you push your changes.</p> <pre><code>pre-commit install\npre-commit install --hook-type commit-msg\n</code></pre> <p>In addition to some Python-specific checks and cleanup tasks, this will also check your commit message so it's in line with the suggested format: https://www.conventionalcommits.org/en/v1.0.0/</p>"},{"location":"development/#run-kiara","title":"Run kiara","text":"<p>To check if everything works as expected and you can start adding/changing code in this repository, run any <code>kiara</code> command:</p> <pre><code>kiara operation list -t dh_benelux_2023\n</code></pre> <p>If everything is set up correctly, the output of this command should contain a few operations that are implemented in this repository.</p>"},{"location":"usage/","title":"Usage","text":"<p>TO BE DONE</p>"},{"location":"info/SUMMARY/","title":"SUMMARY","text":"<ul> <li>module_types</li> <li>operations</li> </ul>"},{"location":"info/module_types/","title":"module_types","text":""},{"location":"info/module_types/#kiara_info.module_types.dh_benelux_2023.example","title":"<code>dh_benelux_2023.example</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    A very simple example module; concatenate two         \n                          strings.                                              \n                          The purpose of this modules is to show the main       \n                          elements of a                                         \n                          [KiaraModule][kiara.modules.KiaraModule]:             \n                        \u2022 the (optional) configuration class: must inherit   \n                       from                                               \n                       [KiaraModuleConfig][kiara.modules.KiaraModuleCo\u2026   \n                       and the config class must be set as the            \n                       _config_cls attribute on the KiaraModule class.    \n                       Configuration values can be retrieved via the      \n                       [self.get_config_value(key)][kiara.modules.Kiar\u2026   \n                       method                                             \n                        \u2022 the inputs description: must return a              \n                       dictionary, containing the input name(s) as        \n                       keys, and another dictionary containing            \n                       type_name information and documentation about      \n                       the input data as value                            \n                        \u2022 the outputs description: must return a             \n                       dictionary, containing the output name(s) as       \n                       keys, and another dictionary containing            \n                       type_name information and documentation about      \n                       the output data as value                           \n                        \u2022 the process method: this is where the actual       \n                       work gets done. Input data can be accessed via     \n                       inputs.get_value_data(key), results can be set     \n                       with the outputs.set_value(key, value) method      \n                          Example:                                              \n                        This example module can be tested on the             \n  commandline with the ``kiara run`` command:          \n  ```                                                  \n  kiara run core_types.example text_1=\"xxx\"            \n  text_2=\"yyy\"                                         \n  ```                                                  \n Author(s)                                                                      \n    Mariella De Crouy   mariella.decrouychanel@uni.lu     \n Context                                                                        \n  Tags         dh_benelux_2023                          \n                        Labels       package: kiara_plugin.dh_benelux_2023    \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                          separator   string   The         no         \" - \"     \n                                               seperator                        \n                                               between                          \n                                               the two                          \n                                               strings.                         \n                       Python class                                                                   \n  python_class_name    ExampleModule                    \n                        python_module_name   kiara_plugin.dh_benelux_2023.\u2026   \n                        full_name            kiara_plugin.dh_benelux_2023.\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class ExampleModule(KiaraModule):                     \n \"\"\"A very simple example module; concatenate t\u2026   \n     The purpose of this modules is to show the mai\u2026   \n     - ***the (optional) configuration class***: mu\u2026   \n          on the `KiaraModule` class. Configuration\u2026   \n     - ***the inputs description***: must return a \u2026   \n          and documentation about the input data as\u2026   \n     - ***the outputs description***: must return a\u2026   \n          and documentation about the output data a\u2026   \n     - ***the ``process`` method***: this is where \u2026   \n          can be set with the ``outputs.set_value(k\u2026   \n     Example:                                          \n         This example module can be tested on the c\u2026   \n         ```                                           \n         kiara run core_types.example text_1=\"xxx\" \u2026   \n         ```                                           \n     \"\"\"                                               \n     _config_cls = ExampleModuleConfig                 \n     _module_type_name = \"dh_benelux_2023.example\"     \n def create_inputs_schema(                         \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         inputs = {                                    \n \"text_1\": {\"type\": \"string\", \"doc\": \"T\u2026   \n \"text_2\": {\"type\": \"string\", \"doc\": \"T\u2026   \n         }                                             \n return inputs                                 \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         outputs = {                                   \n \"text\": {                                 \n \"type\": \"string\",                     \n \"doc\": \"The concatenated text.\",      \n             }                                         \n         }                                             \n return outputs                                \n def process(self, inputs: ValueMap, outputs: V\u2026   \n         separator = self.get_config_value(\"separat\u2026   \n         text_1 = inputs.get_value_data(\"text_1\")      \n         text_2 = inputs.get_value_data(\"text_2\")      \n         result = text_1 + separator + text_2          \n         outputs.set_value(\"text\", result)             \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.get_lccn_metadata","title":"<code>get_lccn_metadata</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    This module will get metadata from strings that       \n                          comply with LCCN pattern: '/sn86069873/1900-01-05/'   \n                          to get the publication references and the dates and   \n                          add those informations as two new columns.            \n                          In addition, if a mapping scheme is provided          \n                          between publication references and publication        \n                          names, it will add a column with the publication      \n                          names. Such a map is provided in the form of a list   \n                          of lists with publication references and              \n                          publication names in the same order. Here is an       \n                          example of how it should look:                        \n                          [[\"2012271201\",\"sn85054967\",\"sn93053873\"],[\"Cronac\u2026   \n                       Author(s)                                                                      \n    Mariella De Crouy   mariella.decrouychanel@uni.lu     \n Context                                                                        \n  Tags         dh_benelux_2023                          \n                        Labels       package: kiara_plugin.dh_benelux_2023    \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    GetLCCNMetadata                  \n                        python_module_name   kiara_plugin.dh_benelux_2023.\u2026   \n                        full_name            kiara_plugin.dh_benelux_2023.\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class GetLCCNMetadata(KiaraModule):                   \n \"\"\"                                               \n     This module will get metadata from strings tha\u2026   \n     In addition, if a mapping scheme is provided b\u2026   \n     Such a map is provided in the form of a list o\u2026   \n     Here is an example of how it should look:         \n     [[\"2012271201\",\"sn85054967\",\"sn93053873\"],[\"Cr\u2026   \n     \"\"\"                                               \n # _config_cls = ExampleModuleConfig               \n     _module_type_name = \"get_lccn_metadata\"           \n def create_inputs_schema(self):                   \n return {                                      \n \"table_input\": {                          \n \"type\": \"table\",                      \n \"doc\": \"The corpus for which we wa\u2026   \n             },                                        \n \"column_name\": {                          \n \"type\": \"string\",                     \n \"doc\": \"The column containing meta\u2026   \n             },                                        \n \"map\": {                                  \n \"type\": \"list\",                       \n \"doc\": \"List of lists of unique pu\u2026   \n \"optional\": True,                     \n             }                                         \n         }                                             \n def create_outputs_schema(self):                  \n return {                                      \n \"table_output\": {                         \n \"type\": \"table\",                      \n \"doc\": \"Augmented table containing\u2026   \n             }                                         \n         }                                             \n def process(self, inputs, outputs) -&gt; None:       \n         table_obj = inputs.get_value_obj(\"table_in\u2026   \n         column_name = inputs.get_value_obj(\"column\u2026   \n try:                                          \n             pub_refs = inputs.get_value_obj(\"map\")\u2026   \n             pub_names = inputs.get_value_obj(\"map\"\u2026   \n except:                                       \n pass                                      \n         sources = table_obj.data.to_pandas()          \n # get publication ref from file name         \n def get_ref(file):                            \n             ref_match = re.findall(r'(\\w+\\d+)_\\d{4\u2026   \n if not ref_match:                         \n raise KiaraProcessingException(f\"C\u2026   \n return ref_match[0]                       \n # get date from file name                     \n def get_date(file):                           \n             date_match = re.findall(r'_(\\d{4}-\\d{2\u2026   \n if not date_match:                        \n raise KiaraProcessingException(f\"C\u2026   \n return date_match[0]                      \n # add date column                             \n         sources['date'] = sources['file_name'].app\u2026   \n # add publication reference column            \n         sources['pub_ref'] = sources[column_name].\u2026   \n try:                                          \n # if map with publications names avail\u2026   \n             sources['pub_name'] = sources['pub_ref\u2026   \n except:                                       \n pass                                      \n         outputs.set_value(\"table_output\", sources)    \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.get_text_stats","title":"<code>get_text_stats</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    This module will add columns with words and           \n                          characters count to a table containing text           \n                          content.                                              \n                       Author(s)                                                                      \n    Mariella De Crouy   mariella.decrouychanel@uni.lu     \n Context                                                                        \n  Tags         dh_benelux_2023                          \n                        Labels       package: kiara_plugin.dh_benelux_2023    \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    GetTextStats                     \n                        python_module_name   kiara_plugin.dh_benelux_2023.\u2026   \n                        full_name            kiara_plugin.dh_benelux_2023.\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class GetTextStats(KiaraModule):                      \n \"\"\"                                               \n     This module will add columns with words and ch\u2026   \n     \"\"\"                                               \n # _config_cls = ExampleModuleConfig               \n     _module_type_name = \"get_text_stats\"              \n def create_inputs_schema(self):                   \n return {                                      \n \"table_input\": {                          \n \"type\": \"table\",                      \n \"doc\": \"The corpus for which we wa\u2026   \n             },                                        \n \"column_name\": {                          \n \"type\": \"string\",                     \n \"doc\": \"The column containing the \u2026   \n             }                                         \n         }                                             \n def create_outputs_schema(self):                  \n return {                                      \n \"table_output\": {                         \n \"type\": \"table\",                      \n \"doc\": \"Augmented table containing\u2026   \n             }                                         \n         }                                             \n def process(self, inputs, outputs) -&gt; None:       \n         table_obj = inputs.get_value_obj(\"table_in\u2026   \n         column_name = inputs.get_value_obj(\"column\u2026   \n         sources = table_obj.data.to_pandas()          \n         sources['chars_count'] = sources[column_na\u2026   \n         sources['words_count'] = sources[column_na\u2026   \n         outputs.set_value(\"table_output\", sources)    \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.viz_data_query","title":"<code>viz_data_query</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    This module processes a dataset to display a          \n                          visualization of the corpus aggregated by a period    \n                          of time.                                              \n                          It aims at serving as a visual aid to create a        \n                          subset of a table.                                    \n                       Author(s)                                                                      \n    Mariella De Crouy   mariella.decrouychanel@uni.lu     \n Context                                                                        \n  Tags         dh_benelux_2023                          \n                        Labels       package: kiara_plugin.dh_benelux_2023    \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    VizDataQuery                     \n                        python_module_name   kiara_plugin.dh_benelux_2023.\u2026   \n                        full_name            kiara_plugin.dh_benelux_2023.\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class VizDataQuery(KiaraModule):                      \n \"\"\"                                               \n     This module processes a dataset to display a v\u2026   \n     It aims at serving as a visual aid to create a\u2026   \n     \"\"\"                                               \n # _config_cls = ExampleModuleConfig               \n     _module_type_name = \"viz_data_query\"              \n def create_inputs_schema(self):                   \n return {                                      \n \"distribution\": {                        \n \"type\": \"string\",                     \n \"doc\": \"The wished data periodicit\u2026   \n             },                                        \n \"column\": {                               \n \"type\": \"string\",                     \n \"doc\": \"The column that contains p\u2026   \n             },                                        \n \"table\": {                                \n \"type\": \"table\",                      \n \"doc\": \"The table for which the di\u2026   \n             }                                         \n         }                                             \n def create_outputs_schema(self):                  \n return {                                      \n \"viz_data\": {                             \n \"type\": \"list\",                       \n \"doc\": \"The aggregated data as a l\u2026   \n             }                                         \n         }                                             \n def process(self, inputs, outputs) -&gt; None:       \n         agg = inputs.get_value_obj(\"distribution\")\u2026   \n         col = inputs.get_value_obj(\"column\").data     \n         table_obj = inputs.get_value_data(\"table\")    \n         arrow_table = table_obj.arrow_table           \n         sources = arrow_table.to_pandas()             \n         sources[\"date\"] = pd.to_datetime(sources[\"\u2026   \n if agg == 'month':                            \n             query = f\"SELECT strptime(concat(month\u2026   \n elif agg == 'year':                           \n             query = f\"SELECT strptime(year, '%Y') \u2026   \n elif agg == 'day':                            \n             query = f\"SELECT strptime(concat('01/'\u2026   \n         queried_df = duckdb.query(query).df()         \n         queried_df = queried_df.astype(str)           \n         viz_data = queried_df.to_dict('records')      \n         outputs.set_value(\"viz_data\", viz_data)       \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/operations/","title":"operations","text":""},{"location":"info/operations/#kiara_info.operations.dh_benelux_2023.example","title":"<code>dh_benelux_2023.example</code>","text":"Documentation <p>A very simple example module; concatenate two strings.</p> <p>The purpose of this modules is to show the main elements of a [<code>KiaraModule</code>][kiara.modules.KiaraModule]:</p> <ul> <li>*the (optional) configuration class*: must inherit from [<code>KiaraModuleConfig</code>][kiara.modules.KiaraModuleConfig], and the config class must be set as the <code>_config_cls</code> attribute    on the <code>KiaraModule</code> class. Configuration values can be retrieved via the [<code>self.get_config_value(key)</code>][kiara.modules.KiaraModule.get_config_value] method</li> <li>*the inputs description*: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information    and documentation about the input data as value</li> <li>*the outputs description*: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information    and documentation about the output data as value</li> <li>*the <code>process</code> method*: this is where the actual work gets done. Input data can be accessed via <code>inputs.get_value_data(key)</code>, results    can be set with the <code>outputs.set_value(key, value)</code> method</li> </ul> <p>Example:</p> <pre><code>This example module can be tested on the commandline with the ``kiara run`` command:\n\n```\nkiara run core_types.example text_1=\"xxx\" text_2=\"yyy\"\n```\n</code></pre> Inputs field name type description required default text_1 string The first text. yes text_2 string The second text. yes Outputs field name type description required default text string The concatenated text. yes"},{"location":"info/operations/#kiara_info.operations.get_lccn_metadata","title":"<code>get_lccn_metadata</code>","text":"Documentation <p>This module will get metadata from strings that comply with LCCN pattern: '/sn86069873/1900-01-05/' to get the publication references and the dates and add those informations as two new columns.</p> <p>In addition, if a mapping scheme is provided between publication references and publication names, it will add a column with the publication names. Such a map is provided in the form of a list of lists with publication references and publication names in the same order. Here is an example of how it should look: [[\"2012271201\",\"sn85054967\",\"sn93053873\"],[\"Cronaca_Sovversiva\",\"Il_Patriota\",\"L'Indipendente\"]]</p> Inputs field name type description required default table_input table The corpus for which we want to get metadata from file names. yes column_name string The column containing metadata. In order to work, file names need to comply with LCCN pattern '/sn86069873/1900-01-05/' containing publication reference and date. yes map list List of lists of unique publications references and publication names in the collection provided in the same order. no Outputs field name type description required default table_output table Augmented table containing extracted metadata. yes"},{"location":"info/operations/#kiara_info.operations.get_text_stats","title":"<code>get_text_stats</code>","text":"Documentation <p>This module will add columns with words and characters count to a table containing text content.</p> Inputs field name type description required default table_input table The corpus for which we want to add words and characters count. yes column_name string The column containing the text for which we want the count. yes Outputs field name type description required default table_output table Augmented table containing words and characters count. yes"},{"location":"info/operations/#kiara_info.operations.viz_data_query","title":"<code>viz_data_query</code>","text":"Documentation <p>This module processes a dataset to display a visualization of the corpus aggregated by a period of time.</p> <p>It aims at serving as a visual aid to create a subset of a table.</p> Inputs field name type description required default distribution string The wished data periodicity to display on visualization, values can be either 'day','month' or 'year'. yes column string The column that contains publication names or ref/id. yes table table The table for which the distribution is needed. yes Outputs field name type description required default viz_data list The aggregated data as a list of dicts for visualization purposes. yes"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>kiara_plugin<ul> <li>dh_benelux_2023<ul> <li>data_types</li> <li>models</li> <li>modules<ul> <li>metadata</li> <li>visualization</li> </ul> </li> <li>pipelines</li> <li>utils</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/kiara_plugin/dh_benelux_2023/__init__/","title":"dh_benelux_2023","text":"<p>Top-level package for kiara_plugin.dh_benelux_2023.</p>"},{"location":"reference/kiara_plugin/dh_benelux_2023/__init__/#kiara_plugin.dh_benelux_2023-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/__init__/#kiara_plugin.dh_benelux_2023.KIARA_METADATA","title":"<code>KIARA_METADATA = {'authors': [{'name': __author__, 'email': __email__}], 'description': 'Kiara modules for: dh_benelux_2023', 'references': {'source_repo': {'desc': 'The module package git repository.', 'url': 'https://github.com/DHARPA-Project/kiara_plugin.dh_benelux_2023'}, 'documentation': {'desc': 'The url for the module package documentation.', 'url': 'https://DHARPA-Project.github.io/kiara_plugin.dh_benelux_2023/'}}, 'tags': ['dh_benelux_2023'], 'labels': {'package': 'kiara_plugin.dh_benelux_2023'}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/__init__/#kiara_plugin.dh_benelux_2023.find_modules","title":"<code>find_modules: KiaraEntryPointItem = (find_kiara_modules_under, 'kiara_plugin.dh_benelux_2023.modules')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/__init__/#kiara_plugin.dh_benelux_2023.find_model_classes","title":"<code>find_model_classes: KiaraEntryPointItem = (find_kiara_model_classes_under, 'kiara_plugin.dh_benelux_2023.models')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/__init__/#kiara_plugin.dh_benelux_2023.find_data_types","title":"<code>find_data_types: KiaraEntryPointItem = (find_data_types_under, 'kiara_plugin.dh_benelux_2023.data_types')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/__init__/#kiara_plugin.dh_benelux_2023.find_pipelines","title":"<code>find_pipelines: KiaraEntryPointItem = (find_pipeline_base_path_for_module, 'kiara_plugin.dh_benelux_2023.pipelines', KIARA_METADATA)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/__init__/#kiara_plugin.dh_benelux_2023-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/__init__/#kiara_plugin.dh_benelux_2023.get_version","title":"<code>get_version()</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/__init__.py</code> <pre><code>def get_version():\n    from pkg_resources import DistributionNotFound, get_distribution\n\n    try:\n        # Change here if project is renamed and does not equal the package name\n        dist_name = __name__\n        __version__ = get_distribution(dist_name).version\n    except DistributionNotFound:\n\n        try:\n            version_file = os.path.join(os.path.dirname(__file__), \"version.txt\")\n\n            if os.path.exists(version_file):\n                with open(version_file, encoding=\"utf-8\") as vf:\n                    __version__ = vf.read()\n            else:\n                __version__ = \"unknown\"\n\n        except (Exception):\n            pass\n\n        if __version__ is None:\n            __version__ = \"unknown\"\n\n    return __version__\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/data_types/","title":"data_types","text":"<p>This module contains the value type classes that are used in the <code>kiara_plugin.dh_benelux_2023</code> package.</p>"},{"location":"reference/kiara_plugin/dh_benelux_2023/models/","title":"models","text":"<p>This module contains the metadata (and other) models that are used in the <code>kiara_plugin.dh_benelux_2023</code> package.</p> <p>Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules.</p> <p>Metadata models must be a sub-class of kiara.metadata.MetadataModel. Other models usually sub-class a pydantic BaseModel or implement custom base classes.</p>"},{"location":"reference/kiara_plugin/dh_benelux_2023/utils/","title":"utils","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/utils/#kiara_plugin.dh_benelux_2023.utils-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/utils/#kiara_plugin.dh_benelux_2023.utils.augment_lineage_data","title":"<code>augment_lineage_data(item, kiara)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/utils.py</code> <pre><code>def augment_lineage_data(item,kiara):\n\n    graph = item.lineage.module_graph\n\n    nodes = graph.nodes.data()\n    augmented_nodes = dict()\n\n\n    def get_info(node):\n            # all this is terribly inefficient\n\n            if node[1][\"node_type\"] == \"operation\":\n\n                result = kiara.retrieve_module_type_info(node[1][\"module_type\"]).dict()\n\n            elif node[1][\"node_type\"] == \"value\":\n\n                value_id = node[0][6:]\n\n                v = kiara.get_value(value_id)\n                if v.is_set:\n                    render_result = kiara.render_value(value=v, target_format=\"string\").rendered\n\n                else:\n                    render_result = \"None\"\n\n                result = {\n                    \"preview\": render_result\n                }\n\n            return result\n\n    for idx, node in enumerate(nodes):\n            node_dict = {\n                \"id\": node[0],\n                \"desc\": node[1],\n                \"parentIds\": [pred for pred in graph.predecessors(node[0])],\n                \"info\": get_info(node)\n            }\n            augmented_nodes[idx] = node_dict\n\n    return augmented_nodes\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/__init__/","title":"modules","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/__init__/#kiara_plugin.dh_benelux_2023.modules-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/__init__/#kiara_plugin.dh_benelux_2023.modules.ExampleModuleConfig","title":"<code>ExampleModuleConfig</code>","text":"<p>         Bases: <code>KiaraModuleConfig</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/__init__.py</code> <pre><code>class ExampleModuleConfig(KiaraModuleConfig):\n\n    separator: str = Field(\n        description=\"The seperator between the two strings.\", default=\" - \"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/__init__/#kiara_plugin.dh_benelux_2023.modules.ExampleModuleConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/__init__/#kiara_plugin.dh_benelux_2023.modules.ExampleModuleConfig.separator","title":"<code>separator: str = Field(description='The seperator between the two strings.', default=' - ')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/__init__/#kiara_plugin.dh_benelux_2023.modules.ExampleModule","title":"<code>ExampleModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>A very simple example module; concatenate two strings.</p> <p>The purpose of this modules is to show the main elements of a <code>KiaraModule</code>:</p> <ul> <li>the (optional) configuration class: must inherit from <code>KiaraModuleConfig</code>, and the config class must be set as the <code>_config_cls</code> attribute      on the <code>KiaraModule</code> class. Configuration values can be retrieved via the <code>self.get_config_value(key)</code> method</li> <li>the inputs description: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information      and documentation about the input data as value</li> <li>the outputs description: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information      and documentation about the output data as value</li> <li>the <code>process</code> method: this is where the actual work gets done. Input data can be accessed via <code>inputs.get_value_data(key)</code>, results      can be set with the <code>outputs.set_value(key, value)</code> method</li> </ul> Example <p>This example module can be tested on the commandline with the <code>kiara run</code> command:</p> <pre><code>kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\"\n</code></pre> Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/__init__.py</code> <pre><code>class ExampleModule(KiaraModule):\n\"\"\"A very simple example module; concatenate two strings.\n\n    The purpose of this modules is to show the main elements of a [`KiaraModule`][kiara.modules.KiaraModule]:\n\n    - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`][kiara.modules.KiaraModuleConfig], and the config class must be set as the `_config_cls` attribute\n         on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`][kiara.modules.KiaraModule.get_config_value] method\n    - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information\n         and documentation about the input data as value\n    - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information\n         and documentation about the output data as value\n    - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results\n         can be set with the ``outputs.set_value(key, value)`` method\n\n    Example:\n\n        This example module can be tested on the commandline with the ``kiara run`` command:\n\n        ```\n        kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\"\n        ```\n    \"\"\"\n\n    _config_cls = ExampleModuleConfig\n    _module_type_name = \"dh_benelux_2023.example\"\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        inputs = {\n            \"text_1\": {\"type\": \"string\", \"doc\": \"The first text.\"},\n            \"text_2\": {\"type\": \"string\", \"doc\": \"The second text.\"},\n        }\n\n        return inputs\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        outputs = {\n            \"text\": {\n                \"type\": \"string\",\n                \"doc\": \"The concatenated text.\",\n            }\n        }\n        return outputs\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n        separator = self.get_config_value(\"separator\")\n\n        text_1 = inputs.get_value_data(\"text_1\")\n        text_2 = inputs.get_value_data(\"text_2\")\n\n        result = text_1 + separator + text_2\n        outputs.set_value(\"text\", result)\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/__init__/#kiara_plugin.dh_benelux_2023.modules.ExampleModule-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/__init__/#kiara_plugin.dh_benelux_2023.modules.ExampleModule._config_cls","title":"<code>_config_cls = ExampleModuleConfig</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/__init__/#kiara_plugin.dh_benelux_2023.modules.ExampleModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/__init__/#kiara_plugin.dh_benelux_2023.modules.ExampleModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/__init__.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    inputs = {\n        \"text_1\": {\"type\": \"string\", \"doc\": \"The first text.\"},\n        \"text_2\": {\"type\": \"string\", \"doc\": \"The second text.\"},\n    }\n\n    return inputs\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/__init__/#kiara_plugin.dh_benelux_2023.modules.ExampleModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/__init__.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    outputs = {\n        \"text\": {\n            \"type\": \"string\",\n            \"doc\": \"The concatenated text.\",\n        }\n    }\n    return outputs\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/__init__/#kiara_plugin.dh_benelux_2023.modules.ExampleModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/__init__.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n    separator = self.get_config_value(\"separator\")\n\n    text_1 = inputs.get_value_data(\"text_1\")\n    text_2 = inputs.get_value_data(\"text_2\")\n\n    result = text_1 + separator + text_2\n    outputs.set_value(\"text\", result)\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/metadata/","title":"metadata","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/metadata/#kiara_plugin.dh_benelux_2023.modules.metadata-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/metadata/#kiara_plugin.dh_benelux_2023.modules.metadata.GetLCCNMetadata","title":"<code>GetLCCNMetadata</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>This module will get metadata from strings that comply with LCCN pattern: '/sn86069873/1900-01-05/' to get the publication references and the dates and add those informations as two new columns. In addition, if a mapping scheme is provided between publication references and publication names, it will add a column with the publication names. Such a map is provided in the form of a list of lists with publication references and publication names in the same order. Here is an example of how it should look: [[\"2012271201\",\"sn85054967\",\"sn93053873\"],[\"Cronaca_Sovversiva\",\"Il_Patriota\",\"L'Indipendente\"]]</p> Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/metadata.py</code> <pre><code>class GetLCCNMetadata(KiaraModule):\n\"\"\"\n    This module will get metadata from strings that comply with LCCN pattern: '/sn86069873/1900-01-05/' to get the publication references and the dates and add those informations as two new columns.\n    In addition, if a mapping scheme is provided between publication references and publication names, it will add a column with the publication names.\n    Such a map is provided in the form of a list of lists with publication references and publication names in the same order.\n    Here is an example of how it should look:\n    [[\"2012271201\",\"sn85054967\",\"sn93053873\"],[\"Cronaca_Sovversiva\",\"Il_Patriota\",\"L'Indipendente\"]]\n    \"\"\"\n\n    # _config_cls = ExampleModuleConfig\n    _module_type_name = \"get_lccn_metadata\"\n\n    def create_inputs_schema(self):\n\n        return {\n            \"table_input\": {\n                \"type\": \"table\",\n                \"doc\": \"The corpus for which we want to get metadata from file names.\",\n            },\n            \"column_name\": {\n                \"type\": \"string\",\n                \"doc\": \"The column containing metadata. In order to work, file names need to comply with LCCN pattern '/sn86069873/1900-01-05/' containing publication reference and date.\"\n            },\n            \"map\": {\n                \"type\": \"list\",\n                \"doc\": \"List of lists of unique publications references and publication names in the collection provided in the same order.\",\n                \"optional\": True,\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"table_output\": {\n                \"type\": \"table\",\n                \"doc\": \"Augmented table containing extracted metadata.\"\n            }\n        }\n\n    def process(self, inputs, outputs) -&gt; None:\n\n        table_obj = inputs.get_value_obj(\"table_input\")\n        column_name = inputs.get_value_obj(\"column_name\").data\n        try:\n            pub_refs = inputs.get_value_obj(\"map\").data[0]\n            pub_names = inputs.get_value_obj(\"map\").data[1]\n        except:\n            pass\n\n        sources = table_obj.data.to_pandas()\n\n         # get publication ref from file name\n        def get_ref(file):\n            ref_match = re.findall(r'(\\w+\\d+)_\\d{4}-\\d{2}-\\d{2}_',file)\n            if not ref_match:\n                raise KiaraProcessingException(f\"Can't process corpus, invalid format for file name: {file}\")\n            return ref_match[0]\n\n        # get date from file name\n        def get_date(file):\n            date_match = re.findall(r'_(\\d{4}-\\d{2}-\\d{2})_',file)\n            if not date_match:\n                raise KiaraProcessingException(f\"Can't process corpus, invalid format for file name: {file}\")\n            return date_match[0]\n\n        # add date column\n        sources['date'] = sources['file_name'].apply(lambda x: get_date(x))\n\n        # add publication reference column\n        sources['pub_ref'] = sources[column_name].apply(lambda x: get_ref(x))\n\n        try:\n            # if map with publications names available, add publication names\n            sources['pub_name'] = sources['pub_ref'].replace(pub_refs, pub_names)\n        except:\n            pass\n\n\n        outputs.set_value(\"table_output\", sources)\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/metadata/#kiara_plugin.dh_benelux_2023.modules.metadata.GetLCCNMetadata-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/metadata/#kiara_plugin.dh_benelux_2023.modules.metadata.GetLCCNMetadata.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/metadata.py</code> <pre><code>def create_inputs_schema(self):\n\n    return {\n        \"table_input\": {\n            \"type\": \"table\",\n            \"doc\": \"The corpus for which we want to get metadata from file names.\",\n        },\n        \"column_name\": {\n            \"type\": \"string\",\n            \"doc\": \"The column containing metadata. In order to work, file names need to comply with LCCN pattern '/sn86069873/1900-01-05/' containing publication reference and date.\"\n        },\n        \"map\": {\n            \"type\": \"list\",\n            \"doc\": \"List of lists of unique publications references and publication names in the collection provided in the same order.\",\n            \"optional\": True,\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/metadata/#kiara_plugin.dh_benelux_2023.modules.metadata.GetLCCNMetadata.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/metadata.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"table_output\": {\n            \"type\": \"table\",\n            \"doc\": \"Augmented table containing extracted metadata.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/metadata/#kiara_plugin.dh_benelux_2023.modules.metadata.GetLCCNMetadata.process","title":"<code>process(inputs, outputs) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/metadata.py</code> <pre><code>def process(self, inputs, outputs) -&gt; None:\n\n    table_obj = inputs.get_value_obj(\"table_input\")\n    column_name = inputs.get_value_obj(\"column_name\").data\n    try:\n        pub_refs = inputs.get_value_obj(\"map\").data[0]\n        pub_names = inputs.get_value_obj(\"map\").data[1]\n    except:\n        pass\n\n    sources = table_obj.data.to_pandas()\n\n     # get publication ref from file name\n    def get_ref(file):\n        ref_match = re.findall(r'(\\w+\\d+)_\\d{4}-\\d{2}-\\d{2}_',file)\n        if not ref_match:\n            raise KiaraProcessingException(f\"Can't process corpus, invalid format for file name: {file}\")\n        return ref_match[0]\n\n    # get date from file name\n    def get_date(file):\n        date_match = re.findall(r'_(\\d{4}-\\d{2}-\\d{2})_',file)\n        if not date_match:\n            raise KiaraProcessingException(f\"Can't process corpus, invalid format for file name: {file}\")\n        return date_match[0]\n\n    # add date column\n    sources['date'] = sources['file_name'].apply(lambda x: get_date(x))\n\n    # add publication reference column\n    sources['pub_ref'] = sources[column_name].apply(lambda x: get_ref(x))\n\n    try:\n        # if map with publications names available, add publication names\n        sources['pub_name'] = sources['pub_ref'].replace(pub_refs, pub_names)\n    except:\n        pass\n\n\n    outputs.set_value(\"table_output\", sources)\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/metadata/#kiara_plugin.dh_benelux_2023.modules.metadata.GetTextStats","title":"<code>GetTextStats</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>This module will add columns with words and characters count to a table containing text content.</p> Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/metadata.py</code> <pre><code>class GetTextStats(KiaraModule):\n\"\"\"\n    This module will add columns with words and characters count to a table containing text content.\n    \"\"\"\n\n    # _config_cls = ExampleModuleConfig\n    _module_type_name = \"get_text_stats\"\n\n    def create_inputs_schema(self):\n\n        return {\n            \"table_input\": {\n                \"type\": \"table\",\n                \"doc\": \"The corpus for which we want to add words and characters count.\",\n            },\n            \"column_name\": {\n                \"type\": \"string\",\n                \"doc\": \"The column containing the text for which we want the count.\"\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"table_output\": {\n                \"type\": \"table\",\n                \"doc\": \"Augmented table containing words and characters count.\"\n            }\n        }\n\n    def process(self, inputs, outputs) -&gt; None:\n\n        table_obj = inputs.get_value_obj(\"table_input\")\n        column_name = inputs.get_value_obj(\"column_name\").data\n\n        sources = table_obj.data.to_pandas()\n\n        sources['chars_count'] = sources[column_name].apply(lambda x: len(x))\n        sources['words_count'] = sources[column_name].apply(lambda x: len(x.split()))\n\n        outputs.set_value(\"table_output\", sources)\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/metadata/#kiara_plugin.dh_benelux_2023.modules.metadata.GetTextStats-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/metadata/#kiara_plugin.dh_benelux_2023.modules.metadata.GetTextStats.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/metadata.py</code> <pre><code>def create_inputs_schema(self):\n\n    return {\n        \"table_input\": {\n            \"type\": \"table\",\n            \"doc\": \"The corpus for which we want to add words and characters count.\",\n        },\n        \"column_name\": {\n            \"type\": \"string\",\n            \"doc\": \"The column containing the text for which we want the count.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/metadata/#kiara_plugin.dh_benelux_2023.modules.metadata.GetTextStats.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/metadata.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"table_output\": {\n            \"type\": \"table\",\n            \"doc\": \"Augmented table containing words and characters count.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/metadata/#kiara_plugin.dh_benelux_2023.modules.metadata.GetTextStats.process","title":"<code>process(inputs, outputs) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/metadata.py</code> <pre><code>def process(self, inputs, outputs) -&gt; None:\n\n    table_obj = inputs.get_value_obj(\"table_input\")\n    column_name = inputs.get_value_obj(\"column_name\").data\n\n    sources = table_obj.data.to_pandas()\n\n    sources['chars_count'] = sources[column_name].apply(lambda x: len(x))\n    sources['words_count'] = sources[column_name].apply(lambda x: len(x.split()))\n\n    outputs.set_value(\"table_output\", sources)\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/visualization/","title":"visualization","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/visualization/#kiara_plugin.dh_benelux_2023.modules.visualization-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/visualization/#kiara_plugin.dh_benelux_2023.modules.visualization.VizDataQuery","title":"<code>VizDataQuery</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>This module processes a dataset to display a visualization of the corpus aggregated by a period of time. It aims at serving as a visual aid to create a subset of a table.</p> Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/visualization.py</code> <pre><code>class VizDataQuery(KiaraModule):\n\"\"\"\n    This module processes a dataset to display a visualization of the corpus aggregated by a period of time.\n    It aims at serving as a visual aid to create a subset of a table.\n    \"\"\"\n\n    # _config_cls = ExampleModuleConfig\n    _module_type_name = \"viz_data_query\"\n\n    def create_inputs_schema(self):\n\n        return {\n             \"distribution\": {\n                \"type\": \"string\",\n                \"doc\": \"The wished data periodicity to display on visualization, values can be either 'day','month' or 'year'.\"\n            },\n            \"column\": {\n                \"type\": \"string\",\n                \"doc\": \"The column that contains publication names or ref/id.\"\n            },\n            \"table\": {\n                \"type\": \"table\",\n                \"doc\": \"The table for which the distribution is needed.\"\n            }\n        }\n\n    def create_outputs_schema(self):\n        return {\n            \"viz_data\": {\n                \"type\": \"list\",\n                \"doc\": \"The aggregated data as a list of dicts for visualization purposes.\"\n            }\n        }\n\n    def process(self, inputs, outputs) -&gt; None:\n\n        agg = inputs.get_value_obj(\"distribution\").data\n        col = inputs.get_value_obj(\"column\").data\n\n        table_obj = inputs.get_value_data(\"table\")\n        arrow_table = table_obj.arrow_table\n        sources = arrow_table.to_pandas()\n\n        sources[\"date\"] = pd.to_datetime(sources[\"date\"])\n\n        if agg == 'month':\n            query = f\"SELECT strptime(concat(month, '/', year), '%m/%Y') as date, {col} as publication_name, count FROM (SELECT YEAR(date) as year, MONTH(date) as month, {col}, count(*) as count FROM sources GROUP BY {col}, YEAR(date), MONTH(date))\"\n\n        elif agg == 'year':\n            query = f\"SELECT strptime(year, '%Y') as date, {col} as publication_name, count FROM (SELECT YEAR(date) as year, {col}, count(*) as count FROM sources GROUP BY {col}, YEAR(date))\"\n\n        elif agg == 'day':\n            query = f\"SELECT strptime(concat('01/', month, '/', year), '%d/%m/%Y') as date, {col} as publication_name, count FROM (SELECT YEAR(date) as year, MONTH(date) as month, {col}, count(*) as count FROM sources GROUP BY {col}, YEAR(date), MONTH(date), DAY(date))\"\n\n        queried_df = duckdb.query(query).df()\n\n        queried_df = queried_df.astype(str)\n\n        viz_data = queried_df.to_dict('records')\n\n        outputs.set_value(\"viz_data\", viz_data)\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/visualization/#kiara_plugin.dh_benelux_2023.modules.visualization.VizDataQuery-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/visualization/#kiara_plugin.dh_benelux_2023.modules.visualization.VizDataQuery.create_inputs_schema","title":"<code>create_inputs_schema()</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/visualization.py</code> <pre><code>def create_inputs_schema(self):\n\n    return {\n         \"distribution\": {\n            \"type\": \"string\",\n            \"doc\": \"The wished data periodicity to display on visualization, values can be either 'day','month' or 'year'.\"\n        },\n        \"column\": {\n            \"type\": \"string\",\n            \"doc\": \"The column that contains publication names or ref/id.\"\n        },\n        \"table\": {\n            \"type\": \"table\",\n            \"doc\": \"The table for which the distribution is needed.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/visualization/#kiara_plugin.dh_benelux_2023.modules.visualization.VizDataQuery.create_outputs_schema","title":"<code>create_outputs_schema()</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/visualization.py</code> <pre><code>def create_outputs_schema(self):\n    return {\n        \"viz_data\": {\n            \"type\": \"list\",\n            \"doc\": \"The aggregated data as a list of dicts for visualization purposes.\"\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/modules/visualization/#kiara_plugin.dh_benelux_2023.modules.visualization.VizDataQuery.process","title":"<code>process(inputs, outputs) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/kiara_plugin/dh_benelux_2023/modules/visualization.py</code> <pre><code>def process(self, inputs, outputs) -&gt; None:\n\n    agg = inputs.get_value_obj(\"distribution\").data\n    col = inputs.get_value_obj(\"column\").data\n\n    table_obj = inputs.get_value_data(\"table\")\n    arrow_table = table_obj.arrow_table\n    sources = arrow_table.to_pandas()\n\n    sources[\"date\"] = pd.to_datetime(sources[\"date\"])\n\n    if agg == 'month':\n        query = f\"SELECT strptime(concat(month, '/', year), '%m/%Y') as date, {col} as publication_name, count FROM (SELECT YEAR(date) as year, MONTH(date) as month, {col}, count(*) as count FROM sources GROUP BY {col}, YEAR(date), MONTH(date))\"\n\n    elif agg == 'year':\n        query = f\"SELECT strptime(year, '%Y') as date, {col} as publication_name, count FROM (SELECT YEAR(date) as year, {col}, count(*) as count FROM sources GROUP BY {col}, YEAR(date))\"\n\n    elif agg == 'day':\n        query = f\"SELECT strptime(concat('01/', month, '/', year), '%d/%m/%Y') as date, {col} as publication_name, count FROM (SELECT YEAR(date) as year, MONTH(date) as month, {col}, count(*) as count FROM sources GROUP BY {col}, YEAR(date), MONTH(date), DAY(date))\"\n\n    queried_df = duckdb.query(query).df()\n\n    queried_df = queried_df.astype(str)\n\n    viz_data = queried_df.to_dict('records')\n\n    outputs.set_value(\"viz_data\", viz_data)\n</code></pre>"},{"location":"reference/kiara_plugin/dh_benelux_2023/pipelines/__init__/","title":"pipelines","text":"<p>Default (empty) module that is used as a base path for pipelines contained in this package.</p>"}]}